---
stages:
  # - sonarqube-check
  # - tests
  - build
  - deploy

# cache:
#   paths:
#     - .m2/repository

## Qualidade de código
## branch: dev
## env vars: SONAR_HOST_URL, SONAR_TOKEN

# sonarqube-check:
#   stage: sonarqube-check
#   image:
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
#     GIT_DEPTH: "0"
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - echo "Starting Analyze"
#     - sonar-scanner -Dsonar.projectKey=$CI_PROJECT_PATH_SLUG -Dsonar.qualitygate.wait=true
#     - echo "Backend Artifacts Successfully Analyzed"
#   allow_failure: true
#   tags:
#     - docker
#   only:
#     - dev

## Testes automatizados
## branch: dev

# tests:
#   stage: tests
#   image: quay.io/quarkus/centos-quarkus-maven:21.0.0-java11
#   script:
#     - mvn verify
#   artifacts:
#     when: always
#     reports:
#       junit:
#         - target/surefire-reports/TEST-*.xml
#         - target/failsafe-reports/TEST-*.xml
#   allow_failure: true
#   tags:
#     - docker
#   only:
#     - dev

## Os dois exemplos acima eu fiz em outros projetos, coloquei como exemplo
## de possível utilização. Outro job que poderia existir é a verificação de
## vulnerabilidade. Nunca fiz, mas existe diversas ferramentas como o Snyk.

build:
  stage: build
  image: docker:19.03
  services:
    - docker:19.03-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo $DOCKER_HUB_TOKEN | docker login -u $DOCKER_HUB_USER --password-stdin
  script:
    - docker build --pull --tag $DOCKER_HUB_IMAGE:$CI_COMMIT_SHA --tag $DOCKER_HUB_IMAGE:latest -f Dockerfile.multistage .
    - docker push $DOCKER_HUB_IMAGE:$CI_COMMIT_SHA
    - docker push $DOCKER_HUB_IMAGE:latest
  tags:
    - docker
  only:
    - dev
    - tst
    - hmg
    - prd

deploy:
  stage: deploy
  image: devth/helm:v3.5.2
  script:
    - helm upgrade
      "$PROJECT_WITH_BRANCH" ./charts/"$CI_PROJECT_NAME"
      --atomic
      --install
      --cleanup-on-fail
      --values values-$CI_COMMIT_REF_NAME.yaml
      --set image.tag="$CI_COMMIT_SHA"
      --set secret.data.DB_URL="$DB_URL"
      --set secret.data.DB_USER="$DB_USERNAME"
      --set secret.data.DB_PASS="$DB_PASSWORD"
  tags:
    - docker
  when: manual
  only:
    - dev
    - tst
    - hmg
    - prd
